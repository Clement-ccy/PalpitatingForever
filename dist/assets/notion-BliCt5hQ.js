const i=[];function S(o){var u,g,f,h,p,d,m,y,P,w,$,E,b,D,N,k,B,_,v,q,x,j,C,T,I;const e=o.properties,r=((f=(g=(u=e.Name)==null?void 0:u.title)==null?void 0:g[0])==null?void 0:f.plain_text)||"Untitled",t=((p=(h=e.Status)==null?void 0:h.status)==null?void 0:p.name)||((m=(d=e.Status)==null?void 0:d.select)==null?void 0:m.name)||null,n=((P=(y=e["Main Category"])==null?void 0:y.select)==null?void 0:P.name)||null,s=(($=(w=e.Subcategory)==null?void 0:w.select)==null?void 0:$.name)||null,a=((b=(E=e.Tags)==null?void 0:E.multi_select)==null?void 0:b.map(c=>c.name))||[],l=((B=(k=(N=(D=e["Cover Image"])==null?void 0:D.files)==null?void 0:N[0])==null?void 0:k.file)==null?void 0:B.url)||((x=(q=(v=(_=e["Cover Image"])==null?void 0:_.files)==null?void 0:v[0])==null?void 0:q.external)==null?void 0:x.url)||null,A=((C=(j=e.Excerpt)==null?void 0:j.rich_text)==null?void 0:C.map(c=>c.plain_text).join(""))||"",U=((I=(T=e["Publish Date"])==null?void 0:T.date)==null?void 0:I.start)||null,O=o.last_edited_time,G=o.created_time;return{id:o.id,title:r,status:t,mainCategory:n,subcategory:s,tags:a,coverImage:l,excerpt:A,publishDate:U,lastEditedTime:O,createdTime:G,url:o.url}}function M(o){o.forEach(e=>{const r=S(e);i.push(r)})}async function F(){i.length=0;try{let o=!0,e=null;const r="1b7ec12a-acd9-802f-afd6-ff310eaa69d7";for(;o;){console.log("Notion API is called to query BLOGS database...");const t=await fetch(`/notion-api/v1/databases/${r}/query`,{method:"POST",headers:{"Content-Type":"application/json","Notion-Version":"2022-06-28"},body:JSON.stringify(e?{start_cursor:e}:{})});if(!t.ok){const s=await t.json();throw console.error("Error fetching Notion Blogs data:",t.status,s),new Error(`Notion API Error (Blogs): ${t.status} - ${s.message||"Unknown error"}`)}const n=await t.json();M(n.results),o=n.has_more,e=n.next_cursor}}catch(o){console.error("Error in queryBlogsDatabase:",o)}return console.log(`Fetched ${i.length} blog posts.`),i}async function J(o){const e=[];if(!o)return console.error("Error: blockId is required for queryPageBlocks."),[];try{let r=!0,t=null;for(;r;){console.log(`Notion API is called to query blocks for block ID: ${o}...`);let n=`/notion-api/v1/blocks/${o}/children`;t&&(n+=`?start_cursor=${t}`);const s=await fetch(n,{method:"GET",headers:{"Content-Type":"application/json","Notion-Version":"2022-06-28"}});if(!s.ok){const l=await s.json();throw console.error(`Error fetching Notion blocks for ${o}:`,s.status,l),new Error(`Notion API Error (Blocks): ${s.status} - ${l.message||"Unknown error"}`)}const a=await s.json();e.push(...a.results),r=a.has_more,t=a.next_cursor}}catch(r){console.error(`Error in queryPageBlocks for block ID ${o}:`,r)}return console.log(`Fetched ${e.length} blocks for block ID ${o}.`),e}async function R(o){if(!o)return console.error("Error: pageId is required for retrievePage."),null;try{console.log(`Notion API is called to retrieve page data for page ID: ${o}...`);const e=`/notion-api/v1/pages/${o}`,r=await fetch(e,{method:"GET",headers:{"Content-Type":"application/json","Notion-Version":"2022-06-28"}});if(!r.ok){const s=await r.json();if(console.error(`Error fetching Notion page data for ${o}:`,r.status,s),r.status===404)return console.warn(`Page with ID ${o} not found.`),null;throw new Error(`Notion API Error (Page Retrieve): ${r.status} - ${s.message||"Unknown error"}`)}const t=await r.json(),n=S(t);return console.log(`Successfully retrieved data for page ID ${o}.`),n}catch(e){return console.error(`Error in retrievePage for page ID ${o}:`,e),null}}export{J as a,F as q,R as r};
